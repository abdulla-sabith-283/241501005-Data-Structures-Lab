#include <stdio.h>
#include <stdlib.h>

int* table;
int size;
int count = 0;

void init(int s) {
    size = s;
    count = 0;
    table = malloc(size * sizeof(int));
    for (int i = 0; i < size; i++)
        table[i] = -1;
}

int hash(int key) {
    return key % size;
}

void rehash() {
    int oldSize = size;
    int* oldTable = table;

    init(size * 2); // double the table size

    for (int i = 0; i < oldSize; i++) {
        if (oldTable[i] != -1)
            insert(oldTable[i]);
    }

    free(oldTable);
}

void insert(int key) {
    if (count >= size) {
        rehash();
    }

    int index = hash(key);

    for (int i = 0; i < size; i++) {
        int try = (index + i) % size;
        if (table[try] == -1) {
            table[try] = key;
            count++;
            return;
        }
    }

    // Should never reach here if rehashing works
    printf("Insertion failed for %d\n", key);
}

void display() {
    for (int i = 0; i < size; i++)
        printf("%d ", table[i]);
    printf("\n");
}

int main() {
    init(5);

    insert(10);
    insert(15);
    insert(20);
    insert(25);
    insert(30);  // triggers rehash
    insert(35);
    insert(40);

    display();

    return 0;
}
